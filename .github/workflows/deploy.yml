name: docker, ci/cd, ec2, hub

on:
    push:
        branches:
            - dev

jobs:
    docker-cicd:
        runs-on: ubuntu-latest
        steps:
            # 소스코드 체크아웃
            - name: 소스코드 체크아웃
              uses: actions/checkout@v4

            # jdk 17 설치
            - name: jdk 17 설치
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: '17'

            # 필요시 현재까지 환경 수시 확인 가능 -> 리눅스 명령어(로그 체크)
            - name: 현재 상황 체크
              run: |
                  pwd
                  ls

            # 환경변수 동적 세팅 X(여기서는 제외)
            # 빌드, 단위 테스트 -> 도커 파일에서 진행됨(생략)

            # 도커 관련 액션 -> 도커 작업을 위한 환경
            - name: 도커 작업을 진행하기 위한 액션 적용
              uses: docker/setup-buildx-action@v3

            # 도커 허브 > 프로필 -> ... 엑세스 토큰 발급
            # 토큰발급 : 프로필 > account settings > Security Personal access tokens
            # generate New access token 버튼 클릭 > 적당한이름/만료기간/read,write,delete
            # 도커 허브 로그인 -> 계정 정보 -> 시크릿 변수
            - name: 도커 허브 로그인
              run: echo "${{ secrets.HUB_DOCKER_TOKEN }}" | docker login -u "${{ secrets.HUB_DOCKER_NAME }}" --password-stdin

            # 백엔드 이미지 생성 -> 허브(레퍼지토리) 푸시
            - name: 백엔드 이미지 생성 -> 허브(레퍼지토리) 푸시
              run: |
                docker build -t park0628/demo_backend ./backend
                docker push park0628/demo_backend

            # 프런트 이미지 생성 -> 허브(레퍼지토리) 푸시
            - name: 프런트 이미지 생성 -> 허브(레퍼지토리) 푸시
              run: |
                docker build --no-cache -t park0628/demo_frontend ./frontend
                docker push park0628/demo_frontend

            # eC2 서버로 필요 파일 업로드(YML, nginx/*.conf)
            # Ec2 생성 -> 탄력적 ip 연결 > 활성화 이후
            # EC2 접속
            # docker-compose.yml, ./nginx/default.conf 업로드
            # 타겟 : /home/ubuntu
            - name: EC2 서버로 필요 파일 업로드
              uses: appleboy/scp-action@v0.1.7
              # 업로드 대상이 n개이면 |로 구성 파일, 파일, ... 표현
              with:
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.EC2_USERNAME }}
                key: ${{ secrets.EC2_KEY }}
                source: |
                  docker-compose.yml,
                  ./nginx/default.conf
                target: /home/ubuntu

    # 시스템 패키지 업데이트
    # sudo apt-get update
    # 필요한 패키지 설치
    # sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
    # Docker의 공식 GPG키를 추가
    # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    # Docker의 공식 apt 저장소를 추가
    # sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    # 시스템 패키지 업데이트
    # sudo apt-get update
    # Docker 설치
    # sudo apt-get install docker-ce docker-ce-cli containerd.io -y
    # 도커 컴포즈 진행
    deploy:
      runs-on: ubuntu-latest
      # 해당 잡이 진행 될려면 사전에 반드시 다른 잡이 선행되야 한다
      needs: docker-cicd
      steps:
        - name: ec2에 SSH 접속 -> 도커 컴포즈 가동 -> 서비스 세팅완료
          uses: appleboy/ssh-action@v1.1.0
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USERNAME }}
            key: ${{ secrets.EC2_KEY }}
            script_stop: true
            # 이미지를 갱신하지는 않는다 -> 도커컴포즈 파일에 기술하여 버전관리 할수있다
            # 이미지에 TAG를 기입하여 버전을 관리한다면 매번 갱신 가능(이미지)
            script: |
              sudo docker compose down
              sudo docker compose up -d
        
    
