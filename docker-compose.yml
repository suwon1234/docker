# 도커 컴포즈 파일
# 목표 1 : 로컬에서  명령어 1개로 web, react, sb, db 까지 한번에 세팅
# 목표 2 : 위 구조 gitaction 적용 CI/CD 완성 + AWS(인스턴스 유형 상대적 고가)

# 공통 파트 (볼륨, 네트워크)
volumes:                  # 볼륨
  mysql_data:             # 커스텀(mysql_data) 지정

networks:                 # 네트워크 지정
  all_dir_network:        # 커스텀(all_dir_network) 지정
    driver: bridge        # 드라이버 타입 지정

# 서비스 파트 (db->server->frontend->nginx)
services:
  database:                   # 서비스명
    container_name: database  # 컨테이너명, 타 서비스에서 접속시 도메인 역활 담당
    image: mysql              # 이미지명 (도커 허브를 통해서 다운)
    restart: always           # 비정상 다운될때 자동 재가동
    environment:
      - MYSQL_ROOT_PASSWORD=p1234 # 루트 사용자 비번
      - MYSQL_DATABASE=todo       # 초기 데이터베이스명
      - MYSQL_USER=guest          # 일반 사용자 아이디
      - MYSQL_PASSWORD=p1234      # 일반 사용자 비번
    volumes:
      - mysql_data:/var/lib/mysql # 데이터베이스 컨테이너가 삭제되고 새로 생성, 데이터는 유지됨
    ports:
      - "3306:3306"               # 외부에서 디비 접속 포트 : 컨테이너 내부 디비 포트
    networks:                     
      - all_dir_network           # 컨셉 : 모든 서비스는 동일 네트워크에 배치
    command:
      --bind-address=0.0.0.0      # 모든 IP에 대해 접속 OK (경우에 따라 생략 가능함) 
  backend:
    container_name: server        # 컨테이너명과 서비스명을 다르게 구성
    build:
      context: ./backend          # 현재 파일 위치에서 backend 밑에 도커파일을 이용하여 이미지 구성
    ports:
      - "8080:8080"               # 스프링부트 포트    
    environment:                  # 도커컴포즈내에 database의 컨테이너명
      - SPRING_DATASOURCE_URL=jdbc:mysql://database:3306/todo 
      - SPRING_DATASOURCE_USERNAME=root   # 편의상 시크릿항목으로 빼지 않고 직접 세팅
      - SPRING_DATASOURCE_PASSWORD=p1234
    networks:
      - all_dir_network
    depends_on:                   # 의존적인 서비스, 선행으로 구동될 서비스
      - database                  # 데이터베이스가 먼저 구동되어 있어야 백엔드 가동됨
  frontend:
    container_name: frontend
    # 백엔드까지 완료된 분들은 프런트엔드 도커파일 작업 진행
    build: 
      context: ./frontend
    ports:
      - "3000:80"               # nginx에 빌드된 결과를 넣어서 컨테이너 가동
    networks:
      - all_dir_network
    depends_on:
      - backend                 # 서비스명, 백엔드가 준비되면 진행
  nginx:                        # proxy 역활
    image: nginx:latest
    container_name: nginx
    volumes:                    # 연동하여, 설정내용을 컨테이너 내용에 덮어서 사용(연동)
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - all_dir_network
    depends_on:
      - frontend